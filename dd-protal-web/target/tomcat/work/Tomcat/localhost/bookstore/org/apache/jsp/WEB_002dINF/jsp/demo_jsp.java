/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2018-04-29 07:11:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class demo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("<meta name=\"Author\" contect=\"http://www.webqin.net\">\r\n");
      out.write("<title>忘记密码</title>\r\n");
      out.write("<link rel=\"shortcut icon\" href=\"images/favicon.ico\" />\r\n");
      out.write("<link type=\"text/css\" href=\"css/css.css\" rel=\"stylesheet\" />\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <header>\r\n");
      out.write("\t    <a href=\"#\" class=\"logo\"></a>\r\n");
      out.write("\t\t<div class=\"desc\">重置密码</div>\r\n");
      out.write("\t</header>\r\n");
      out.write("  <div class=\"content\">\r\n");
      out.write("   <div class=\"web-width\">\r\n");
      out.write("     <div class=\"for-liucheng\">\r\n");
      out.write("      <div class=\"liulist for-cur\"></div>\r\n");
      out.write("      <div class=\"liulist\"></div>\r\n");
      out.write("      <div class=\"liulist\"></div>\r\n");
      out.write("      <div class=\"liulist\"></div>\r\n");
      out.write("      <div class=\"liutextbox\">\r\n");
      out.write("       <div class=\"liutext for-cur\"><em>1</em><br /><strong>填写账户名</strong></div>\r\n");
      out.write("       <div class=\"liutext\"><em>2</em><br /><strong>验证身份</strong></div>\r\n");
      out.write("       <div class=\"liutext\"><em>3</em><br /><strong>设置新密码</strong></div>\r\n");
      out.write("       <div class=\"liutext\"><em>4</em><br /><strong>完成</strong></div>\r\n");
      out.write("      </div>\r\n");
      out.write("     </div><!--for-liucheng/-->\r\n");
      out.write("     <form action=\"forgetPwd2.html\" method=\"get\" class=\"forget-pwd\">\r\n");
      out.write("       <dl>\r\n");
      out.write("        <dt>账户名：</dt>\r\n");
      out.write("        <dd><input type=\"text\" /></dd>\r\n");
      out.write("        <div class=\"clears\"></div>\r\n");
      out.write("       </dl> \r\n");
      out.write("       <dl>\r\n");
      out.write("        <dt>验证码：</dt>\r\n");
      out.write("        <dd>\r\n");
      out.write("         <input type=\"text\" /> \r\n");
      out.write("         <div class=\"yanzma\">\r\n");
      out.write("           <canvas width=\"100\" height=\"40\" id=\"verifyCanvas\"></canvas>\r\n");
      out.write("           <img id=\"code_img\"> <a href=\"\">换一换</a>\r\n");
      out.write("         </div>\r\n");
      out.write("        </dd>\r\n");
      out.write("        <div class=\"clears\"></div>\r\n");
      out.write("       </dl>\r\n");
      out.write("       <div class=\"subtijiao\"><input type=\"submit\" value=\"提交\" /></div> \r\n");
      out.write("      </form><!--forget-pwd/-->\r\n");
      out.write("   </div><!--web-width/-->\r\n");
      out.write("  </div><!--content/-->\r\n");
      out.write("  \r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("    var nums = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\r\n");
      out.write("        'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\r\n");
      out.write("        'y', 'z'];\r\n");
      out.write("\r\n");
      out.write("    drawCode();\r\n");
      out.write("    // 绘制验证码\r\n");
      out.write("    function drawCode() {\r\n");
      out.write("        var canvas = document.getElementById(\"verifyCanvas\");  //获取HTML端画布\r\n");
      out.write("        var context = canvas.getContext(\"2d\");                 //获取画布2D上下文\r\n");
      out.write("        context.fillStyle = \"cornflowerblue\";                  //画布填充色\r\n");
      out.write("        context.fillRect(0, 0, canvas.width, canvas.height);   //清空画布\r\n");
      out.write("        context.fillStyle = \"white\";                           //设置字体颜色\r\n");
      out.write("        context.font = \"25px Arial\";                           //设置字体\r\n");
      out.write("        var rand = new Array();\r\n");
      out.write("        var x = new Array();\r\n");
      out.write("        var y = new Array();\r\n");
      out.write("        for (var i = 0; i < 5; i++) {\r\n");
      out.write("            rand[i] = nums[Math.floor(Math.random() * nums.length)]\r\n");
      out.write("            x[i] = i * 16 + 10;\r\n");
      out.write("            y[i] = Math.random() * 20 + 20;\r\n");
      out.write("            context.fillText(rand[i], x[i], y[i]);\r\n");
      out.write("        }\r\n");
      out.write("        //画3条随机线\r\n");
      out.write("        for (var i = 0; i < 3; i++) {\r\n");
      out.write("            drawline(canvas, context);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 画30个随机点\r\n");
      out.write("        for (var i = 0; i < 30; i++) {\r\n");
      out.write("            drawDot(canvas, context);\r\n");
      out.write("        }\r\n");
      out.write("        convertCanvasToImage(canvas)\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 随机线\r\n");
      out.write("    function drawline(canvas, context) {\r\n");
      out.write("        context.moveTo(Math.floor(Math.random() * canvas.width), Math.floor(Math.random() * canvas.height));             //随机线的起点x坐标是画布x坐标0位置，y坐标是画布高度的随机数\r\n");
      out.write("        context.lineTo(Math.floor(Math.random() * canvas.width), Math.floor(Math.random() * canvas.height));  //随机线的终点x坐标是画布宽度，y坐标是画布高度的随机数\r\n");
      out.write("        context.lineWidth = 0.5;                                                  //随机线宽\r\n");
      out.write("        context.strokeStyle = 'rgba(50,50,50,0.3)';                               //随机线描边属性\r\n");
      out.write("        context.stroke();                                                         //描边，即起点描到终点\r\n");
      out.write("    }\r\n");
      out.write("    // 随机点(所谓画点其实就是画1px像素的线，方法不再赘述)\r\n");
      out.write("    function drawDot(canvas, context) {\r\n");
      out.write("        var px = Math.floor(Math.random() * canvas.width);\r\n");
      out.write("        var py = Math.floor(Math.random() * canvas.height);\r\n");
      out.write("        context.moveTo(px, py);\r\n");
      out.write("        context.lineTo(px + 1, py + 1);\r\n");
      out.write("        context.lineWidth = 0.2;\r\n");
      out.write("        context.stroke();\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("    // 绘制图片\r\n");
      out.write("    function convertCanvasToImage(canvas) {\r\n");
      out.write("        document.getElementById(\"verifyCanvas\").style.display = \"none\";\r\n");
      out.write("        var image = document.getElementById(\"code_img\");\r\n");
      out.write("        image.src = canvas.toDataURL(\"image/png\");\r\n");
      out.write("        return image;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 点击图片刷新\r\n");
      out.write("    document.getElementById('code_img').onclick = function () {\r\n");
      out.write("        $('#verifyCanvas').remove();\r\n");
      out.write("        $('#verify').after('<canvas width=\"100\" height=\"40\" id=\"verifyCanvas\"></canvas>')\r\n");
      out.write("        drawCode();\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
